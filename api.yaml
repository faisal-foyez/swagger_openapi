
#The info and openapi section of the API contract contains essential metadata. 
#There are both required and optional fields.
#the info object should give a high-level overview of what the API does.
openapi: 3.0.0
info:
  title: Simple Pet Store
  version: 1.0.0
  description: This is a sample server for a pet store.
  termsOfService: http://example.com/terms/
  contact:
    name: API Blogger
    email: support@example.com
    url: http://example.com/support
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/License-2.0.html

#The servers object can give a client information on where the API’s servers are located through its URL.
#OAS 3.0 supports multiple servers.
servers:
- url: https://development.gigantic-server.com/v1
  description: Development server
- url: https://staging.gigantic-server.com/v1
  description: Staging server
- url: https://api.gigantic-server.com/v1
  description: Production server

#An OAS contract’s paths object shows the various endpoints an API exposes and the corresponding HTTP methods. 
#It’s also under each method that the actual request-response cycle is detailed.

#Here is an example of a single defined path:
paths:
  /path/{petId}:
    get:
      summary: Find pet by ID
      description: Returns a single pet
      #Parameters are the variable parts of a request
      #There are four types of parameters that can be specified using the OAS 3.0
        #path parameters, such as /users/{id}
        #query parameters, such as /users?role=admin
        #header parameters, such as X-MyHeader: Value
        #cookie parameters, which are passed in the Cookie header, such as Cookie: debug=0; csrftoken=BUSe35dohU3O1MZvDCU
      parameters:
      - name: petId
        in: path
        description: ID of pet to return
        required: true
        schema:
          type: integer
          format: int64
      #Every response is defined by its HTTP status code, and the data is returned.
      responses:
        200:
          description: successful operation
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Pet not found
          content: {}
  
  #Tags are friendly categories to group various API operations. 
  #This allows end-users of the API to better segment and identify what they want to use the API for. 
  #These tags can also be handled by other third-party tools which integrate or read the OAS.
  /pet/findByStatus:
    get:
      summary: Finds pets by Status
      #Tags can automatically be added to every path operation using the tags object. 
      tags:
        - pets
  /pet:
    post:
      summary: Adds a new pet to the store
      tags:
        - pets
#Tags can also be given descriptions by adding an optional tags section in the root level of the API definition.
tags:
- name: pets
  description: Everything about your Pets


#The API may repeat a lot of existing parameters or response descriptions in many different paths and operations, 
#and rewriting them every time makes them prone to inconsistent descriptions and can be very time-consuming.
#The component object can hold a set of reusable objects for an APIs design
paths:
  /pets/{petId}:
    get:
      summary: Get a pet by ID
      parameters:
        ...
      responses:
        '200':
          description: A single pet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
  /pets:
    get:
      summary: Get all pets
      responses:
        '200':
          description: A list of pets.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
components:
  schemas:
    Pet:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string